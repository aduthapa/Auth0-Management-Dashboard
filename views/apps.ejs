// Replace the <script> section at the bottom of views/apps.ejs with this:

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
  let allApps = [];
  let filteredApps = [];
  let favorites = JSON.parse(localStorage.getItem('favoriteApps') || '[]');
  let currentFilter = 'all';

  // Initialize page
  document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ TRUE One-Click SSO Apps page loaded');
    console.log('Auth0 Config:', window.AUTH0_CONFIG);
    console.log('SSO Token present:', !!window.SSO_TOKEN);
    
    // Initialize components
    loadApplications();
    setupEventListeners();
    updateSSOStatus();
    
    // Test TRUE one-click SSO session on load
    setTimeout(() => {
      testSSO();
    }, 1000);
  });

  function setupEventListeners() {
    const searchInput = document.getElementById('searchInput');
    const sortSelect = document.getElementById('sortSelect');
    
    if (searchInput) {
      searchInput.addEventListener('input', debounce(filterApps, 300));
    }
    
    if (sortSelect) {
      sortSelect.addEventListener('change', sortApps);
    }
    
    document.querySelectorAll('[data-filter]').forEach(tab => {
      tab.addEventListener('click', function(e) {
        e.preventDefault();
        setActiveFilter(this.dataset.filter);
      });
    });
  }

  async function updateSSOStatus() {
    try {
      const response = await fetch('/api/sso/check');
      const data = await response.json();
      
      const statusEl = document.getElementById('ssoStatus');
      const checkEl = document.getElementById('ssoCheck');
      const spinnerEl = document.getElementById('ssoSpinner');
      
      if (data.authenticated && data.sso_ready) {
        statusEl.innerHTML = '<i class="bi bi-check-circle me-1"></i>TRUE One-Click Ready';
        statusEl.className = 'sso-status';
        statusEl.style.background = 'rgba(40, 167, 69, 0.9)';
        checkEl.style.display = 'inline-block';
        spinnerEl.style.display = 'none';
      } else {
        statusEl.innerHTML = '<i class="bi bi-exclamation-triangle me-1"></i>Session Issue';
        statusEl.style.background = 'rgba(220, 53, 69, 0.9)';
        checkEl.style.display = 'none';
        spinnerEl.style.display = 'none';
      }
    } catch (error) {
      console.error('SSO status check failed:', error);
    }
  }

  function loadApplications() {
    console.log('üì± Loading applications with TRUE one-click SSO...');
    
    const loadingState = document.getElementById('loadingState');
    const appsGrid = document.getElementById('appsGrid');
    
    if (loadingState) loadingState.style.display = 'block';
    if (appsGrid) appsGrid.style.display = 'none';
    
    fetch('/api/applications')
      .then(response => {
        console.log('üì° Response status:', response.status);
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('üìä API Response:', data);
        
        if (data.success && data.applications) {
          allApps = data.applications;
          filteredApps = [...allApps];
          
          console.log(`‚úÖ Loaded ${allApps.length} applications for TRUE one-click SSO:`, allApps.map(app => ({
            name: app.name,
            type: app.app_type,
            sso_disabled: app.sso_disabled
          })));
          
          updateStats();
          renderApps();
          updateRecentActivity();
          
          // Hide loading, show apps
          if (loadingState) loadingState.style.display = 'none';
          if (appsGrid) appsGrid.style.display = 'grid';
        } else {
          throw new Error(data.error || 'No applications data received');
        }
      })
      .catch(error => {
        console.error('‚ùå Error loading applications:', error);
        
        const errorHtml = `
          <div class="alert alert-danger">
            <h5>‚ùå Failed to Load Applications</h5>
            <p><strong>Error:</strong> ${error.message}</p>
            <button class="btn btn-outline-danger btn-sm" onclick="loadApplications()">
              <i class="bi bi-arrow-clockwise me-1"></i>Retry
            </button>
            <a href="/test" class="btn btn-outline-info btn-sm ms-2">
              <i class="bi bi-gear me-1"></i>Debug
            </a>
          </div>
        `;
        
        if (loadingState) {
          loadingState.innerHTML = errorHtml;
        }
      });
  }

  function renderApps() {
    console.log(`üé® Rendering ${filteredApps.length} applications with TRUE one-click SSO`);
    const grid = document.getElementById('appsGrid');
    const noAppsMessage = document.getElementById('noAppsMessage');
    
    if (!grid) {
      console.error('‚ùå Apps grid element not found');
      return;
    }
    
    if (filteredApps.length === 0) {
      grid.style.display = 'none';
      if (noAppsMessage) noAppsMessage.style.display = 'block';
      return;
    }
    
    grid.style.display = 'grid';
    if (noAppsMessage) noAppsMessage.style.display = 'none';
    
    grid.innerHTML = filteredApps.map(app => `
      <div class="app-card ${favorites.includes(app.client_id) ? 'favorite' : ''}" 
           onclick="launchAppWithTrueOneClick('${app.client_id}')"
           data-app-id="${app.client_id}">
        
        <button class="favorite-btn ${favorites.includes(app.client_id) ? 'active' : ''}" 
                onclick="event.stopPropagation(); toggleFavorite('${app.client_id}')"
                title="Add to favorites">
          <i class="bi bi-star${favorites.includes(app.client_id) ? '-fill' : ''}"></i>
        </button>
        
        <span class="app-type-badge badge bg-${getTypeBadgeColor(app.app_type)}">
          ${app.app_type || 'Unknown'}
        </span>
        
        <div class="app-icon">
          ${app.logo_uri ? 
            `<img src="${app.logo_uri}" alt="${app.name}" style="width: 100%; height: 100%; object-fit: contain; border-radius: 12px;">` : 
            getAppIcon(app.name)
          }
        </div>
        
        <h6 class="fw-bold mb-1">${app.name}</h6>
        <p class="text-muted small mb-0">${app.description || 'TRUE one-click access - no login forms'}</p>
        
        <div class="app-stats mt-2">
          <small><i class="bi bi-rocket me-1"></i>No Login Forms</small>
          ${getSSOModeIcon(app.app_type, app.sso_disabled)}
        </div>
        
        <!-- Multiple launch options -->
        <div class="btn-group w-100 mt-2" onclick="event.stopPropagation();">
          <button class="btn btn-primary btn-sm" onclick="launchAppWithTrueOneClick('${app.client_id}')">
            <i class="bi bi-rocket-takeoff me-1"></i>Launch
          </button>
          <button class="btn btn-outline-primary btn-sm dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown">
            <span class="visually-hidden">Toggle Dropdown</span>
          </button>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="#" onclick="launchAppWithTrueOneClick('${app.client_id}')">
              <i class="bi bi-share me-2"></i>Session Share
            </a></li>
            <li><a class="dropdown-item" href="#" onclick="launchWithDirectAccess('${app.client_id}')">
              <i class="bi bi-arrow-right-circle me-2"></i>Direct Access
            </a></li>
            <li><a class="dropdown-item" href="#" onclick="launchWithTokenBridge('${app.client_id}')">
              <i class="bi bi-link me-2"></i>Token Bridge
            </a></li>
          </ul>
        </div>
        
        ${app.sso_disabled ? '<div class="alert alert-warning p-1 mt-1"><small>SSO Disabled</small></div>' : ''}
      </div>
    `).join('');
    
    console.log('‚úÖ Apps rendered with TRUE one-click capability (no login forms)');
  }

  // TRUE One-Click SSO using session sharing - NO LOGIN FORMS EVER
  async function launchAppWithTrueOneClick(clientId) {
    console.log('üöÄ Launching app with TRUE one-click SSO (NO LOGIN FORMS EVER):', clientId);
    
    const app = allApps.find(a => a.client_id === clientId);
    const appName = app ? app.name : 'Application';
    
    if (app && app.sso_disabled) {
      showToast('warning', `‚ö†Ô∏è ${appName}`, 'SSO is disabled for this application', 'text-warning');
      return;
    }
    
    recordAppLaunch(clientId);
    setAppLaunchingState(clientId, true);
    showToast('launching', `üöÄ ${appName}`, 'Starting TRUE one-click access...', 'text-primary');
    
    try {
      // Step 1: Get session sharing URL (bypasses Auth0 completely)
      const response = await fetch(`/api/applications/${clientId}/sso-launch`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache'
        }
      });
      
      const data = await response.json();
      
      if (data.success && data.direct) {
        console.log('‚úÖ TRUE one-click URL generated (no Auth0):', data.sso_url);
        console.log('üéØ Method:', data.auth_method);
        console.log('üö´ Bypassing Auth0 login forms completely');
        
        showToast('connecting', `üîó ${appName}`, 'Establishing direct connection...', 'text-info');
        
        // Open the session sharing URL (no Auth0 login pages)
        const newWindow = window.open(data.sso_url, '_blank');
        
        // Monitor for success
        let checkCount = 0;
        const maxChecks = 25; // 5 seconds max
        
        const checkWindow = setInterval(() => {
          checkCount++;
          
          try {
            if (newWindow.closed) {
              clearInterval(checkWindow);
              showToast('closed', `üì± ${appName}`, 'Application window was closed', 'text-warning');
              setAppLaunchingState(clientId, false);
              return;
            }
            
            // Try to detect if we've navigated to the target app
            try {
              const currentUrl = newWindow.location.href;
              if (currentUrl && !currentUrl.includes(window.location.hostname)) {
                clearInterval(checkWindow);
                showToast('success', `‚úÖ ${appName}`, 'TRUE one-click login successful!', 'text-success');
                setAppLaunchingState(clientId, false);
                return;
              }
            } catch (e) {
              // Cross-origin means we're on the target app
              if (checkCount > 3) {
                clearInterval(checkWindow);
                showToast('success', `‚úÖ ${appName}`, 'Application launched successfully!', 'text-success');
                setAppLaunchingState(clientId, false);
                return;
              }
            }
            
          } catch (e) {
            // Ignore monitoring errors
          }
          
          if (checkCount >= maxChecks) {
            clearInterval(checkWindow);
            showToast('completed', `üéâ ${appName}`, 'Launch completed', 'text-info');
            setAppLaunchingState(clientId, false);
          }
        }, 200);
        
      } else {
        throw new Error(data.error || 'Failed to generate TRUE one-click access');
      }
      
    } catch (error) {
      console.error('‚ùå TRUE one-click failed:', error);
      handleTrueOneClickError(error, clientId, appName);
    }
  }

  // Alternative methods for different app types
  async function launchWithDirectAccess(clientId) {
    console.log('üéØ Launching with direct access (completely bypassing Auth0):', clientId);
    
    const app = allApps.find(a => a.client_id === clientId);
    const appName = app ? app.name : 'Application';
    
    recordAppLaunch(clientId);
    setAppLaunchingState(clientId, true);
    showToast('direct', `üéØ ${appName}`, 'Using direct access method...', 'text-primary');
    
    try {
      const directUrl = `/direct-access/${clientId}`;
      
      // Open direct access URL
      const newWindow = window.open(directUrl, '_blank');
      
      setTimeout(() => {
        showToast('success', `‚úÖ ${appName}`, 'Direct access completed!', 'text-success');
        setAppLaunchingState(clientId, false);
      }, 2000);
      
    } catch (error) {
      console.error('‚ùå Direct access failed:', error);
      handleTrueOneClickError(error, clientId, appName);
    }
  }

  async function launchWithTokenBridge(clientId) {
    console.log('üåâ Launching with token bridge:', clientId);
    
    const app = allApps.find(a => a.client_id === clientId);
    const appName = app ? app.name : 'Application';
    
    recordAppLaunch(clientId);
    setAppLaunchingState(clientId, true);
    showToast('bridge', `üåâ ${appName}`, 'Using token bridge method...', 'text-primary');
    
    try {
      const bridgeUrl = `/token-bridge/${clientId}`;
      
      // Open token bridge in a popup
      const popup = window.open(bridgeUrl, 'tokenBridge', 'width=400,height=300');
      
      // Listen for token from popup
      window.addEventListener('message', function tokenListener(event) {
        if (event.data.type === 'sso_token') {
          window.removeEventListener('message', tokenListener);
          
          showToast('success', `‚úÖ ${appName}`, 'Token bridge successful!', 'text-success');
          setAppLaunchingState(clientId, false);
          
          // Token received, can now access the app
          console.log('Token received:', event.data.token);
        }
      });
      
      // Timeout for popup
      setTimeout(() => {
        if (!popup.closed) {
          popup.close();
        }
        setAppLaunchingState(clientId, false);
      }, 10000);
      
    } catch (error) {
      console.error('‚ùå Token bridge failed:', error);
      handleTrueOneClickError(error, clientId, appName);
    }
  }

  // Enhanced error handling for TRUE one-click
  function handleTrueOneClickError(error, clientId, appName) {
    console.error('TRUE One-Click Error Details:', error);
    
    setAppLaunchingState(clientId, false);
    
    let errorMessage = error.message || 'Unknown error';
    let actionButtons = '';
    
    if (errorMessage.includes('session invalid')) {
      errorMessage = 'Your session has expired. Please refresh and try again.';
      actionButtons = '<button class="btn btn-sm btn-primary mt-2" onclick="window.location.reload()">Refresh Page</button>';
    } else {
      // Offer multiple alternative methods
      actionButtons = `
        <div class="mt-2">
          <button class="btn btn-sm btn-primary me-1" onclick="launchAppWithTrueOneClick('${clientId}')">Retry Session Share</button>
          <button class="btn btn-sm btn-outline-primary me-1" onclick="launchWithDirectAccess('${clientId}')">Direct Access</button>
          <button class="btn btn-sm btn-outline-secondary" onclick="launchWithTokenBridge('${clientId}')">Token Bridge</button>
        </div>
      `;
    }
    
    showToast('error', `‚ùå ${appName}`, errorMessage, 'text-danger');
    
    const errorHtml = `
      <div class="alert alert-info alert-dismissible fade show mt-3" role="alert">
        <h6><i class="bi bi-info-circle me-2"></i>TRUE One-Click Options: ${appName}</h6>
        <p class="mb-1">Multiple access methods available - try any option below:</p>
        ${actionButtons}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    `;
    
    const container = document.querySelector('.container');
    if (container) {
      container.insertAdjacentHTML('afterbegin', errorHtml);
    }
  }

  function setAppLaunchingState(clientId, isLaunching) {
    const appCard = document.querySelector(`[data-app-id="${clientId}"]`);
    if (appCard) {
      if (isLaunching) {
        appCard.classList.add('launching');
        const indicator = document.createElement('div');
        indicator.className = 'launch-indicator';
        indicator.innerHTML = '<i class="bi bi-rocket-takeoff me-1"></i>TRUE One-Click...';
        appCard.appendChild(indicator);
      } else {
        appCard.classList.remove('launching');
        const indicator = appCard.querySelector('.launch-indicator');
        if (indicator) indicator.remove();
      }
    }
  }

  // Enhanced toast notifications for TRUE one-click SSO
  function showToast(id, title, message, textClass) {
    // Remove existing toast with same ID
    const existingToast = document.getElementById(id + 'Toast');
    if (existingToast) {
      existingToast.parentElement.remove();
    }
    
    // Determine auto-hide delay based on message type
    let delay = 4000;
    if (id === 'launching' || id === 'preparing') delay = 6000;
    if (id === 'success') delay = 3000;
    if (id === 'error') delay = 8000;
    
    const toastHtml = `
      <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1060;">
        <div id="${id}Toast" class="toast" role="alert" data-bs-autohide="true" data-bs-delay="${delay}">
          <div class="toast-header">
            <strong class="me-auto ${textClass}">${title}</strong>
            <small class="text-muted">${new Date().toLocaleTimeString()}</small>
            <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
          </div>
          <div class="toast-body">${message}</div>
        </div>
      </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', toastHtml);
    const toast = new bootstrap.Toast(document.getElementById(id + 'Toast'));
    toast.show();
    
    // Auto-remove the container after hiding
    setTimeout(() => {
      const container = document.getElementById(id + 'Toast')?.parentElement;
      if (container) container.remove();
    }, delay + 1000);
  }

  function getSSOModeIcon(appType, ssoDisabled) {
    if (ssoDisabled) {
      return '<div class="sso-indicator" style="background: #dc3545;" title="SSO Disabled"><i class="bi bi-x"></i></div>';
    }
    
    switch(appType) {
      case 'sso_integration':
        return '<div class="sso-indicator sso-integration" title="TRUE One-Click SSO"><i class="bi bi-link-45deg"></i></div>';
      case 'samlp':
        return '<div class="sso-indicator sso-saml" title="SAML TRUE One-Click"><i class="bi bi-shield-check"></i></div>';
      case 'regular_web':
      case 'spa':
        return '<div class="sso-indicator sso-oauth" title="OAuth TRUE One-Click"><i class="bi bi-check"></i></div>';
      case 'non_interactive':
        return '<div class="sso-indicator sso-api" title="API Access"><i class="bi bi-gear"></i></div>';
      default:
        return '<div class="sso-indicator sso-ready" title="TRUE One-Click Ready"><i class="bi bi-check"></i></div>';
    }
  }

  function toggleFavorite(clientId) {
    const index = favorites.indexOf(clientId);
    if (index > -1) {
      favorites.splice(index, 1);
    } else {
      favorites.push(clientId);
    }
    
    localStorage.setItem('favoriteApps', JSON.stringify(favorites));
    updateStats();
    renderApps();
    updateFilterCounts();
  }

  function filterApps() {
    const searchInput = document.getElementById('searchInput');
    const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
    
    filteredApps = allApps.filter(app => {
      const matchesSearch = !searchTerm || 
        app.name.toLowerCase().includes(searchTerm) ||
        (app.description && app.description.toLowerCase().includes(searchTerm));
      
      const matchesFilter = 
        currentFilter === 'all' ||
        (currentFilter === 'favorites' && favorites.includes(app.client_id)) ||
        (currentFilter === 'saml' && app.app_type === 'samlp') ||
        (currentFilter === 'oauth' && (app.app_type === 'spa' || app.app_type === 'regular_web')) ||
        (currentFilter === 'recent' && isRecentlyUsed(app.client_id));
      
      return matchesSearch && matchesFilter;
    });
    
    console.log(`üîç Filtered to ${filteredApps.length} applications`);
    renderApps();
  }

  function setActiveFilter(filter) {
    currentFilter = filter;
    
    document.querySelectorAll('[data-filter]').forEach(tab => {
      tab.classList.remove('active');
    });
    const activeTab = document.querySelector(`[data-filter="${filter}"]`);
    if (activeTab) {
      activeTab.classList.add('active');
    }
    
    filterApps();
  }

  function sortApps() {
    const sortSelect = document.getElementById('sortSelect');
    const sortBy = sortSelect ? sortSelect.value : 'name';
    
    filteredApps.sort((a, b) => {
      switch(sortBy) {
        case 'name':
          return a.name.localeCompare(b.name);
        case 'recent':
          return getLastUsed(b.client_id) - getLastUsed(a.client_id);
        case 'favorites':
          const aFav = favorites.includes(a.client_id);
          const bFav = favorites.includes(b.client_id);
          if (aFav && !bFav) return -1;
          if (!aFav && bFav) return 1;
          return a.name.localeCompare(b.name);
        case 'type':
          return (a.app_type || 'z').localeCompare(b.app_type || 'z');
        default:
          return 0;
      }
    });
    
    renderApps();
  }

  function updateStats() {
    const totalAppsEl = document.getElementById('totalApps');
    const favoriteAppsEl = document.getElementById('favoriteApps');
    const ssoEnabledEl = document.getElementById('ssoEnabled');
    const recentLoginsEl = document.getElementById('recentLogins');
    
    if (totalAppsEl) totalAppsEl.textContent = allApps.length;
    if (favoriteAppsEl) favoriteAppsEl.textContent = favorites.length;
    if (ssoEnabledEl) ssoEnabledEl.textContent = allApps.filter(app => !app.sso_disabled).length;
    if (recentLoginsEl) recentLoginsEl.textContent = getRecentlyUsedApps().length;
    
    updateFilterCounts();
  }

  function updateFilterCounts() {
    const counts = {
      allCount: allApps.length,
      favCount: favorites.length,
      samlCount: allApps.filter(app => app.app_type === 'samlp').length,
      oauthCount: allApps.filter(app => app.app_type === 'spa' || app.app_type === 'regular_web').length,
      recentCount: getRecentlyUsedApps().length
    };
    
    Object.keys(counts).forEach(id => {
      const el = document.getElementById(id);
      if (el) el.textContent = counts[id];
    });
  }

  function updateRecentActivity() {
    const activityEl = document.getElementById('recentActivity');
    if (!activityEl) return;
    
    const recentApps = getRecentlyUsedApps().slice(0, 3);
    
    if (recentApps.length === 0) {
      activityEl.innerHTML = '<div class="p-3 text-center text-muted small">No recent activity</div>';
      return;
    }
    
    const activityHtml = recentApps.map(app => `
      <div class="border-bottom p-2">
        <div class="d-flex align-items-center">
          <div class="me-2" style="font-size: 1.2rem;">${getAppIcon(app.name)}</div>
          <div class="flex-grow-1">
            <div class="fw-bold small">${app.name}</div>
            <div class="text-muted" style="font-size: 0.75rem;">
              ${formatLastUsed(getLastUsed(app.client_id))}
            </div>
          </div>
          <button class="btn btn-outline-primary btn-sm" onclick="launchAppWithTrueOneClick('${app.client_id}')">
            <i class="bi bi-box-arrow-up-right"></i>
          </button>
        </div>
      </div>
    `).join('');
    
    activityEl.innerHTML = activityHtml;
  }

  function refreshApps() {
    console.log('üîÑ Refreshing applications...');
    loadApplications();
  }

  async function testSSO() {
    console.log('üîê Testing TRUE one-click SSO session...');
    
    const spinnerEl = document.getElementById('ssoSpinner');
    const checkEl = document.getElementById('ssoCheck');
    
    if (spinnerEl) spinnerEl.style.display = 'inline-block';
    if (checkEl) checkEl.style.display = 'none';
    
    try {
      const response = await fetch('/api/sso/check');
      const data = await response.json();
      
      if (data.authenticated && data.sso_ready) {
        showToast('success', '‚úÖ TRUE One-Click SSO Test Passed', `Session sharing ready: ${data.user.email}`, 'text-success');
        if (checkEl) checkEl.style.display = 'inline-block';
      } else {
        showToast('error', '‚ùå TRUE One-Click SSO Test Failed', data.reason || 'Session invalid', 'text-danger');
      }
    } catch (error) {
      console.error('TRUE one-click SSO test failed:', error);
      showToast('error', '‚ùå TRUE One-Click SSO Test Failed', error.message, 'text-danger');
    } finally {
      if (spinnerEl) spinnerEl.style.display = 'none';
    }
  }

  // Utility functions
  function getAppIcon(name) {
    const icons = {
      'cloud': 'bi-cloud-arrow-up',
      'storage': 'bi-cloud-arrow-up',
      'wp': 'bi-wordpress',
      'wordpress': 'bi-wordpress',
      'admin': 'bi-gear-fill',
      'google': 'bi-google',
      'workspace': 'bi-briefcase',
      'office': 'bi-file-earmark-text',
      'onlyoffice': 'bi-file-earmark-text',
      'dashboard': 'bi-speedometer2',
      'sso': 'bi-shield-check'
    };
    
    const iconClass = Object.keys(icons).find(key => name.toLowerCase().includes(key));
    return iconClass ? `<i class="bi ${icons[iconClass]}"></i>` : `<i class="bi bi-app"></i>`;
  }

  function getTypeBadgeColor(type) {
    const colors = {
      'samlp': 'primary',
      'spa': 'success', 
      'regular_web': 'info',
      'native': 'warning',
      'm2m': 'secondary',
      'sso_integration': 'warning',
      'non_interactive': 'dark'
    };
    return colors[type] || 'secondary';
  }

  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  function recordAppLaunch(clientId) {
    const launches = JSON.parse(localStorage.getItem('appLaunches') || '{}');
    launches[clientId] = Date.now();
    localStorage.setItem('appLaunches', JSON.stringify(launches));
  }

  function getLastUsed(clientId) {
    const launches = JSON.parse(localStorage.getItem('appLaunches') || '{}');
    return launches[clientId] || 0;
  }

  function isRecentlyUsed(clientId) {
    const lastUsed = getLastUsed(clientId);
    return lastUsed > (Date.now() - 7 * 24 * 60 * 60 * 1000);
  }

  function getRecentlyUsedApps() {
    return allApps.filter(app => isRecentlyUsed(app.client_id))
                 .sort((a, b) => getLastUsed(b.client_id) - getLastUsed(a.client_id));
  }

  function formatLastUsed(timestamp) {
    if (!timestamp) return 'Never';
    
    const now = Date.now();
    const diff = now - timestamp;
    
    if (diff < 60000) return 'Just now';
    if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;
    if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;
    return `${Math.floor(diff / 86400000)}d ago`;
  }
</script>>
